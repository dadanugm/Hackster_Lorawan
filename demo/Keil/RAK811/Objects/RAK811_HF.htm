<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RAK811_HF.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RAK811_HF.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jul 21 16:47:38 2020
<BR><P>
<H3>Maximum Stack Usage =       1528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lora_write_config &rArr; write_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[109]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[42]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">NMI_Handler</a><BR>
 <LI><a href="#[44]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">MemManage_Handler</a><BR>
 <LI><a href="#[45]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">BusFault_Handler</a><BR>
 <LI><a href="#[46]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">UsageFault_Handler</a><BR>
 <LI><a href="#[47]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">SVC_Handler</a><BR>
 <LI><a href="#[48]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">DebugMon_Handler</a><BR>
 <LI><a href="#[49]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">PendSV_Handler</a><BR>
 <LI><a href="#[5d]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5d]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[8d]">BoardGetBatteryLevel</a> from board.o(i.BoardGetBatteryLevel) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[45]">BusFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[61]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[60]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[56]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[57]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[58]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[59]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5c]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[48]">DebugMon_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[51]">EXTI0_IRQHandler</a> from gpio-board.o(i.EXTI0_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[72]">EXTI15_10_IRQHandler</a> from gpio-board.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[52]">EXTI1_IRQHandler</a> from gpio-board.o(i.EXTI1_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[53]">EXTI2_IRQHandler</a> from gpio-board.o(i.EXTI2_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[54]">EXTI3_IRQHandler</a> from gpio-board.o(i.EXTI3_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[55]">EXTI4_IRQHandler</a> from gpio-board.o(i.EXTI4_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[62]">EXTI9_5_IRQHandler</a> from gpio-board.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4f]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[7d]">GpsMcuIrqNotify</a> from gps-board.o(i.GpsMcuIrqNotify) referenced from gps-board.o(i.GpsMcuInit)
 <LI><a href="#[43]">HardFault_Handler</a> from rw_lora.o(i.HardFault_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6a]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[69]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6c]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6b]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[8a]">McpsConfirm</a> from rw_lora.o(i.McpsConfirm) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[8b]">McpsIndication</a> from rw_lora.o(i.McpsIndication) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[44]">MemManage_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[8c]">MlmeConfirm</a> from rw_lora.o(i.MlmeConfirm) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[42]">NMI_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[82]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7e]">OnMacStateCheckTimerEvent</a> from loramac.o(i.OnMacStateCheckTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[84]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[84]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.SX127X_INIT)
 <LI><a href="#[85]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[85]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.SX127X_INIT)
 <LI><a href="#[87]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[87]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.SX127X_INIT)
 <LI><a href="#[83]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[83]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.SX127X_INIT)
 <LI><a href="#[86]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[86]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.SX127X_INIT)
 <LI><a href="#[80]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[81]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[7f]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4c]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[49]">PendSV_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[50]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[73]">RTC_Alarm_IRQHandler</a> from rtc-board.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4e]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[41]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6d]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6e]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[47]">SVC_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[9c]">SX1276CheckRfFrequency</a> from sx127x-board.o(i.SX1276CheckRfFrequency) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[95]">SX1276GetStatus</a> from sx127x.o(i.SX1276GetStatus) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[9d]">SX1276GetTimeOnAir</a> from sx127x.o(i.SX1276GetTimeOnAir) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[94]">SX1276Init</a> from sx127x.o(i.SX1276Init) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[98]">SX1276IsChannelFree</a> from sx127x.o(i.SX1276IsChannelFree) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[3c]">SX1276OnDio0Irq</a> from sx127x.o(i.SX1276OnDio0Irq) referenced 2 times from sx127x.o(.data)
 <LI><a href="#[3d]">SX1276OnDio1Irq</a> from sx127x.o(i.SX1276OnDio1Irq) referenced 2 times from sx127x.o(.data)
 <LI><a href="#[3e]">SX1276OnDio2Irq</a> from sx127x.o(i.SX1276OnDio2Irq) referenced 2 times from sx127x.o(.data)
 <LI><a href="#[3f]">SX1276OnDio3Irq</a> from sx127x.o(i.SX1276OnDio3Irq) referenced 2 times from sx127x.o(.data)
 <LI><a href="#[40]">SX1276OnDio4Irq</a> from sx127x.o(i.SX1276OnDio4Irq) referenced 2 times from sx127x.o(.data)
 <LI><a href="#[88]">SX1276OnTimeoutIrq</a> from sx127x.o(i.SX1276OnTimeoutIrq) referenced from sx127x.o(i.SX1276Init)
 <LI><a href="#[99]">SX1276Random</a> from sx127x.o(i.SX1276Random) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a6]">SX1276Read</a> from sx127x.o(i.SX1276Read) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a8]">SX1276ReadBuffer</a> from sx127x.o(i.SX1276ReadBuffer) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a4]">SX1276ReadRssi</a> from sx127x.o(i.SX1276ReadRssi) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[9e]">SX1276Send</a> from sx127x.o(i.SX1276Send) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[97]">SX1276SetChannel</a> from sx127x.o(i.SX1276SetChannel) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a9]">SX1276SetMaxPayloadLength</a> from sx127x.o(i.SX1276SetMaxPayloadLength) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[96]">SX1276SetModem</a> from sx127x.o(i.SX1276SetModem) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[aa]">SX1276SetPublicNetwork</a> from sx127x.o(i.SX1276SetPublicNetwork) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a1]">SX1276SetRx</a> from sx127x.o(i.SX1276SetRx) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[9a]">SX1276SetRxConfig</a> from sx127x.o(i.SX1276SetRxConfig) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[9f]">SX1276SetSleep</a> from sx127x.o(i.SX1276SetSleep) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a0]">SX1276SetStby</a> from sx127x.o(i.SX1276SetStby) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[9b]">SX1276SetTxConfig</a> from sx127x.o(i.SX1276SetTxConfig) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a3]">SX1276SetTxContinuousWave</a> from sx127x.o(i.SX1276SetTxContinuousWave) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a2]">SX1276StartCad</a> from sx127x.o(i.SX1276StartCad) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a5]">SX1276Write</a> from sx127x.o(i.SX1276Write) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[a7]">SX1276WriteBuffer</a> from sx127x.o(i.SX1276WriteBuffer) referenced from sx127x-board.o(.constdata)
 <LI><a href="#[4a]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[77]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[4d]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[64]">TIM10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[65]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[66]">TIM2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[67]">TIM3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[68]">TIM4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[75]">TIM6_IRQHandler</a> from timer-board.o(i.TIM6_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[76]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[63]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6f]">USART1_IRQHandler</a> from uart-board.o(i.USART1_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[70]">USART2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[71]">USART3_IRQHandler</a> from uart-board.o(i.USART3_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[74]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5e]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5f]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[46]">UsageFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4b]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[ab]">__main</a> from __main.o(!!!main) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[79]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[7a]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[39]">handle_ack_retrans</a> from lora_config.o(i.handle_ack_retrans) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2f]">handle_adr</a> from lora_config.o(i.handle_adr) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[29]">handle_app_eui</a> from lora_config.o(i.handle_app_eui) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2a]">handle_app_key</a> from lora_config.o(i.handle_app_key) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2c]">handle_apps_key</a> from lora_config.o(i.handle_apps_key) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[33]">handle_channel_list</a> from lora_config.o(i.handle_channel_list) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[34]">handle_channel_mask</a> from lora_config.o(i.handle_channel_mask) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[30]">handle_def_tx_dr</a> from lora_config.o(i.handle_def_tx_dr) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[27]">handle_dev_addr</a> from lora_config.o(i.handle_dev_addr) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[28]">handle_dev_eui</a> from lora_config.o(i.handle_dev_eui) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[3a]">handle_duty_cycle</a> from lora_config.o(i.handle_duty_cycle) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[37]">handle_join_cnt</a> from lora_config.o(i.handle_join_cnt) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[3b]">handle_lorawan_class</a> from lora_config.o(i.handle_lorawan_class) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[35]">handle_max_channels</a> from lora_config.o(i.handle_max_channels) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[38]">handle_nb_trans</a> from lora_config.o(i.handle_nb_trans) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2b]">handle_nwks_key</a> from lora_config.o(i.handle_nwks_key) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[31]">handle_public_network</a> from lora_config.o(i.handle_public_network) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[36]">handle_rx2</a> from lora_config.o(i.handle_rx2) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[32]">handle_rx_delay1</a> from lora_config.o(i.handle_rx_delay1) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2d]">handle_tx_power</a> from lora_config.o(i.handle_tx_power) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[2e]">handle_txpwr_level</a> from lora_config.o(i.handle_txpwr_level) referenced 2 times from lora_config.o(.data)
 <LI><a href="#[26]">lora_abp_info</a> from at_cmd.o(i.lora_abp_info) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1d]">lora_band</a> from at_cmd.o(i.lora_band) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[20]">lora_gpio</a> from at_cmd.o(i.lora_gpio) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[9]">lora_join</a> from at_cmd.o(i.lora_join) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[e]">lora_link_check</a> from at_cmd.o(i.lora_link_check) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[25]">lora_link_cnt</a> from at_cmd.o(i.lora_link_cnt) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[16]">lora_mode</a> from at_cmd.o(i.lora_mode) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[21]">lora_rd_adc</a> from at_cmd.o(i.lora_rd_adc) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[22]">lora_rd_iic</a> from at_cmd.o(i.lora_rd_iic) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1e]">lora_rd_reg</a> from at_cmd.o(i.lora_rd_reg) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[f]">lora_read_config</a> from at_cmd.o(i.lora_read_config) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[24]">lora_recv_set</a> from at_cmd.o(i.lora_recv_set) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[10]">lora_reload</a> from at_cmd.o(i.lora_reload) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[b]">lora_reset</a> from at_cmd.o(i.lora_reset) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[17]">lora_rf_config</a> from at_cmd.o(i.lora_rf_config) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1b]">lora_rx_stop</a> from at_cmd.o(i.lora_rx_stop) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[19]">lora_rxc</a> from at_cmd.o(i.lora_rxc) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[12]">lora_send</a> from at_cmd.o(i.lora_send) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[d]">lora_signal</a> from at_cmd.o(i.lora_signal) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[14]">lora_sleep</a> from at_cmd.o(i.lora_sleep) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1c]">lora_status</a> from at_cmd.o(i.lora_status) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[15]">lora_tx_dr</a> from at_cmd.o(i.lora_tx_dr) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1a]">lora_tx_stop</a> from at_cmd.o(i.lora_tx_stop) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[18]">lora_txc</a> from at_cmd.o(i.lora_txc) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[13]">lora_uart_config</a> from at_cmd.o(i.lora_uart_config) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[a]">lora_version</a> from at_cmd.o(i.lora_version) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[23]">lora_wr_iic</a> from at_cmd.o(i.lora_wr_iic) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[1f]">lora_wr_reg</a> from at_cmd.o(i.lora_wr_reg) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[11]">lora_write_config</a> from at_cmd.o(i.lora_write_config) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[90]">rw_P2PRxDone</a> from rw_lora.o(i.rw_P2PRxDone) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[92]">rw_P2PRxError</a> from rw_lora.o(i.rw_P2PRxError) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[91]">rw_P2PRxTimeout</a> from rw_lora.o(i.rw_P2PRxTimeout) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[93]">rw_P2PTxContinueTimerEvent</a> from rw_lora.o(i.rw_P2PTxContinueTimerEvent) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[8e]">rw_P2PTxDone</a> from rw_lora.o(i.rw_P2PTxDone) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[8f]">rw_P2PTxTimeout</a> from rw_lora.o(i.rw_P2PTxTimeout) referenced from rw_lora.o(i.rw_InitLoRaWAN)
 <LI><a href="#[c]">start_boot</a> from at_cmd.o(i.start_boot) referenced 2 times from at_cmd.o(.data)
 <LI><a href="#[89]">timer_join_callback</a> from app.o(i.timer_join_callback) referenced from app.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ab]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ac]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[376]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[377]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[378]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[379]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[37a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[af]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[ef]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b1]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[b3]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b7]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[37b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[b9]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bb]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bc]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[bf]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c1]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c4]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[c5]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[c7]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[37c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[c9]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[cb]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[cd]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[cf]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[37d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[37e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[37f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[380]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[381]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[382]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[383]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[384]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[385]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[386]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[387]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[388]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[389]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[38a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[38b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[38c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[38d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[38e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[38f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[390]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[391]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[392]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[393]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[394]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[395]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[396]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[397]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[398]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[399]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ad]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[39a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[39b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[da]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rw_LoRaTxData &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[39c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[dd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[39d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[df]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[41]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e1]"></a>isxdigit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isxdigit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nwks_key
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_eui
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_apps_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_key
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_eui
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[e3]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>

<P><STRONG><a name="[e5]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_txpwr_level
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tx_power
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_delay1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_public_network
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nwks_key
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nb_trans
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_max_channels
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_lorawan_class
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_join_cnt
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duty_cycle
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_eui
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_def_tx_dr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_list
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_apps_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_key
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_eui
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_adr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ack_retrans
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_GetVersion
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_ex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_hex_buf
</UL>

<P><STRONG><a name="[e7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[e8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[e6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ba]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[ec]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c0]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[c8]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[b2]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ed]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f0]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_txpwr_level
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_tx_power
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx_delay1
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx2
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nb_trans
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_lorawan_class
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_join_cnt
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_def_tx_dr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_list
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ack_retrans
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_uart_config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rxc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rf_config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_set
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_adc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_cnt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
</UL>

<P><STRONG><a name="[f3]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx2
</UL>

<P><STRONG><a name="[f4]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nwks_key
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_eui
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_addr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_apps_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_key
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_eui
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
</UL>

<P><STRONG><a name="[358]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
</UL>

<P><STRONG><a name="[32f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_nwks_key
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dev_eui
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_apps_key
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_key
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_app_eui
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
</UL>

<P><STRONG><a name="[162]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
</UL>

<P><STRONG><a name="[351]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaTxData
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[f6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[39e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[39f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaClrRadioStatus
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[3a2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_string
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_config_string
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_public_network
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_duty_cycle
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_list
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_adr
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Str2Region
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_status
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3a5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3a6]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ea]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[eb]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[3a8]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[7a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ca]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[cc]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[102]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[c2]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[104]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[be]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[c6]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[f5]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f2]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3a9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3aa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[fd]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[106]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[100]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[107]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ce]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[d0]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[105]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[f9]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[103]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[3ab]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[dc]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[fa]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10c]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[10b]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[10d]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[10e]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[fb]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[fc]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[10f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[110]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[112]"></a>ADC_Enable</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[113]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[117]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[118]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[11a]"></a>AES_CMAC_Update</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[11b]"></a>AdcInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc.o(i.AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = AdcInit &rArr; AdcMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_adc
</UL>

<P><STRONG><a name="[11d]"></a>AdcMcuFormat</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, adc-board.o(i.AdcMcuFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AdcMcuFormat &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[11c]"></a>AdcMcuInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, adc-board.o(i.AdcMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = AdcMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[120]"></a>AdcMcuRead</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, adc-board.o(i.AdcMcuRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AdcMcuRead &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcReadChannel
</UL>

<P><STRONG><a name="[126]"></a>AdcReadChannel</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, adc.o(i.AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcReadChannel &rArr; AdcMcuRead &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_adc
</UL>

<P><STRONG><a name="[127]"></a>BlockLowPowerDuringTask</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc-board.o(i.BlockLowPowerDuringTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BlockLowPowerDuringTask &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>

<P><STRONG><a name="[129]"></a>BoardDeInitMcu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BoardDeInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
</UL>

<P><STRONG><a name="[8d]"></a>BoardGetBatteryLevel</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, board.o(i.BoardGetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BoardGetBatteryLevel &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[357]"></a>BoardGetUniqueId</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, board.o(i.BoardGetUniqueId))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
</UL>

<P><STRONG><a name="[130]"></a>BoardInitMcu</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>

<P><STRONG><a name="[146]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMs &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[51]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI0_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI15_10_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI1_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI2_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI3_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI4_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI9_5_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>FLASH_PageErase</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[149]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[317]"></a>FifoFlush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo.o(i.FifoFlush))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFlush
</UL>

<P><STRONG><a name="[318]"></a>FifoInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.FifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[14b]"></a>FifoPop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[14d]"></a>FifoPush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[14e]"></a>GPIOIRQ_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, at_cmd.o(i.GPIOIRQ_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOIRQ_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[311]"></a>GPIO_EXTI_Callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio-board.o(i.GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
</UL>

<P><STRONG><a name="[312]"></a>GetBoardPowerSource</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.GetBoardPowerSource))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
</UL>

<P><STRONG><a name="[11f]"></a>GpioInit</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuInit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[150]"></a>GpioMcuInit</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, gpio-board.o(i.GpioMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[153]"></a>GpioMcuRead</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio-board.o(i.GpioMcuRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioMcuRead
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[155]"></a>GpioMcuSetInterrupt</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, gpio-board.o(i.GpioMcuSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[152]"></a>GpioMcuWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio-board.o(i.GpioMcuWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>

<P><STRONG><a name="[158]"></a>GpioRead</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioRead &rArr; GpioMcuRead
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
</UL>

<P><STRONG><a name="[159]"></a>GpioSetInterrupt</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gpio.o(i.GpioSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[12c]"></a>GpioWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gpio.o(i.GpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuStart
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[15a]"></a>GpsConvertPositionFromStringToNumerical</STRONG> (Thumb, 772 bytes, Stack size 96 bytes, gps.o(i.GpsConvertPositionFromStringToNumerical))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
</UL>

<P><STRONG><a name="[15e]"></a>GpsConvertPositionIntoBinary</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gps.o(i.GpsConvertPositionIntoBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpsConvertPositionIntoBinary &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
</UL>

<P><STRONG><a name="[161]"></a>GpsFormatGpsData</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gps.o(i.GpsFormatGpsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GpsFormatGpsData &rArr; GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>

<P><STRONG><a name="[163]"></a>GpsInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gps.o(i.GpsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GpsInit &rArr; GpsMcuInit &rArr; GpsMcuOnPpsSignal &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>GpsMcuInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gps-board.o(i.GpsMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GpsMcuInit &rArr; GpsMcuOnPpsSignal &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuStart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuOnPpsSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsInit
</UL>

<P><STRONG><a name="[16e]"></a>GpsMcuInvertPpsTrigger</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gps-board.o(i.GpsMcuInvertPpsTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>

<P><STRONG><a name="[7d]"></a>GpsMcuIrqNotify</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gps-board.o(i.GpsMcuIrqNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GpsMcuIrqNotify &rArr; BlockLowPowerDuringTask &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockLowPowerDuringTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps-board.o(i.GpsMcuInit)
</UL>
<P><STRONG><a name="[166]"></a>GpsMcuOnPpsSignal</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gps-board.o(i.GpsMcuOnPpsSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = GpsMcuOnPpsSignal &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>

<P><STRONG><a name="[165]"></a>GpsMcuStart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gps-board.o(i.GpsMcuStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GpsMcuStart &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>

<P><STRONG><a name="[16b]"></a>GpsNmeaChecksum</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gps.o(i.GpsNmeaChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GpsNmeaChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nibble2HexChar
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaValidateChecksum
</UL>

<P><STRONG><a name="[168]"></a>GpsParseGpsData</STRONG> (Thumb, 1206 bytes, Stack size 24 bytes, gps.o(i.GpsParseGpsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GpsParseGpsData &rArr; GpsFormatGpsData &rArr; GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInvertPpsTrigger
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaValidateChecksum
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>

<P><STRONG><a name="[121]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>

<P><STRONG><a name="[125]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_DeInit &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>

<P><STRONG><a name="[124]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>

<P><STRONG><a name="[11e]"></a>HAL_ADC_Init</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuFormat
</UL>

<P><STRONG><a name="[16f]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[170]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>

<P><STRONG><a name="[122]"></a>HAL_ADC_Start</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMcuRead
</UL>

<P><STRONG><a name="[138]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[139]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[137]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[147]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[171]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32l1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[31a]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DISABLE_FLASH
</UL>

<P><STRONG><a name="[173]"></a>HAL_FLASH_Program</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32l1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[31c]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENABLE_FLASH
</UL>

<P><STRONG><a name="[174]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_GPIO_Init</STRONG> (Thumb, 430 bytes, Stack size 20 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>

<P><STRONG><a name="[154]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>

<P><STRONG><a name="[157]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>

<P><STRONG><a name="[111]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[175]"></a>HAL_I2C_Init</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuFormat
</UL>

<P><STRONG><a name="[178]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuReadBuffer
</UL>

<P><STRONG><a name="[17c]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuWriteBuffer
</UL>

<P><STRONG><a name="[176]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[30a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[131]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[180]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[14f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIRQ_Enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[156]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[17f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[306]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[305]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[200]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[304]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[307]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[185]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[186]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 728 bytes, Stack size 16 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[188]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[177]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[189]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[187]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[18a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2370 bytes, Stack size 16 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_RTCEx_DeactivateWakeUpTimer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_DeactivateWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTCEx_DeactivateWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[18e]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[191]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
</UL>

<P><STRONG><a name="[193]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>

<P><STRONG><a name="[194]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>

<P><STRONG><a name="[195]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[196]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[19c]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SPI_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[19e]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[30b]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer-board.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart-board.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart-board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart-board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[43]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rw_lora.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>I2cInit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, i2c.o(i.I2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = I2cInit &rArr; I2cMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuInit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cResetBus
</UL>

<P><STRONG><a name="[1c0]"></a>I2cMcuFormat</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, i2c-board.o(i.I2cMcuFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2cMcuFormat &rArr; HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>

<P><STRONG><a name="[1bf]"></a>I2cMcuInit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, i2c-board.o(i.I2cMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = I2cMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>

<P><STRONG><a name="[1c1]"></a>I2cMcuReadBuffer</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, i2c-board.o(i.I2cMcuReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2cMcuReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBuffer
</UL>

<P><STRONG><a name="[1c2]"></a>I2cMcuWriteBuffer</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, i2c-board.o(i.I2cMcuWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2cMcuWriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteBuffer
</UL>

<P><STRONG><a name="[1c3]"></a>I2cReadBuffer</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, i2c.o(i.I2cReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2cReadBuffer &rArr; I2cMcuReadBuffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
</UL>

<P><STRONG><a name="[1c4]"></a>I2cResetBus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2c.o(i.I2cResetBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = I2cResetBus &rArr; I2cInit &rArr; I2cMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
</UL>

<P><STRONG><a name="[1c5]"></a>I2cWriteBuffer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, i2c.o(i.I2cWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2cWriteBuffer &rArr; I2cMcuWriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMcuWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
</UL>

<P><STRONG><a name="[303]"></a>InstallWakeUpPin</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, board.o(i.InstallWakeUpPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InstallWakeUpPin
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[1b7]"></a>IsFifoEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.IsFifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[1b3]"></a>IsFifoFull</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fifo.o(i.IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFifoFull &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1c8]"></a>LoRaClrRadioStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac.o(i.LoRaClrRadioStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LoRaClrRadioStatus &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_status
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_InitLoRaWAN
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_DeInitLoRaWAN
</UL>

<P><STRONG><a name="[345]"></a>LoRaGetRadioStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramac.o(i.LoRaGetRadioStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_status
</UL>

<P><STRONG><a name="[343]"></a>LoRaGetRssiSnr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramac.o(i.LoRaGetRssiSnr))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_signal
</UL>

<P><STRONG><a name="[33b]"></a>LoRaGetUserMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.LoRaGetUserMode))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>

<P><STRONG><a name="[1ca]"></a>LoRaMacComputeMic</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1cb]"></a>LoRaMacDeInitialization</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacDeInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacDeInitialization
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_DeInitLoRaWAN
</UL>

<P><STRONG><a name="[1cd]"></a>LoRaMacInitialization</STRONG> (Thumb, 710 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Region2Str
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_InitLoRaWAN
</UL>

<P><STRONG><a name="[1d6]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1d7]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1d8]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1d9]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaTxData
</UL>

<P><STRONG><a name="[1dc]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_cnt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_abp_info
</UL>

<P><STRONG><a name="[1dd]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 766 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_txpwr_level
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_rx2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_def_tx_dr
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkABP
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_cnt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>

<P><STRONG><a name="[1e2]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaLinkCheck
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkOTAA
</UL>

<P><STRONG><a name="[1e8]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1e9]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[1ea]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacQueryTxPossible &rArr; ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaTxData
</UL>

<P><STRONG><a name="[1ed]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>

<P><STRONG><a name="[33c]"></a>LoRaSetUserMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.LoRaSetUserMode))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>

<P><STRONG><a name="[16c]"></a>Nibble2HexChar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, utilities.o(i.Nibble2HexChar))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaChecksum
</UL>

<P><STRONG><a name="[1f7]"></a>PrepareFrame</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[73]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc-board.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[192]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
</UL>

<P><STRONG><a name="[199]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[197]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[201]"></a>RegionAS923AdrNext</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, regionas923.o(i.RegionAS923AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923AdrNext &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[239]"></a>RegionAS923AlternateDr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[203]"></a>RegionAS923ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regionas923.o(i.RegionAS923ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionAS923ApplyCFList &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[249]"></a>RegionAS923ApplyDrOffset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[206]"></a>RegionAS923CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionas923.o(i.RegionAS923CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAS923CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[208]"></a>RegionAS923ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[204]"></a>RegionAS923ChannelAdd</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionAS923ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[205]"></a>RegionAS923ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[20c]"></a>RegionAS923ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, regionas923.o(i.RegionAS923ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionAS923ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[211]"></a>RegionAS923DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[202]"></a>RegionAS923GetPhyParam</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AdrNext
</UL>

<P><STRONG><a name="[214]"></a>RegionAS923InitDefaults</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, regionas923.o(i.RegionAS923InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[215]"></a>RegionAS923LinkAdrReq</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, regionas923.o(i.RegionAS923LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[218]"></a>RegionAS923NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionAS923NewChannelReq &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[219]"></a>RegionAS923NextChannel</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2ca]"></a>RegionAS923RxConfig</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[21b]"></a>RegionAS923RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[21c]"></a>RegionAS923SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[21e]"></a>RegionAS923SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionAS923SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[221]"></a>RegionAS923TxConfig</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionAS923TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2d8]"></a>RegionAS923TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[222]"></a>RegionAS923Verify</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[223]"></a>RegionAU915AdrNext</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, regionau915.o(i.RegionAU915AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionAU915AdrNext &rArr; RegionAU915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23a]"></a>RegionAU915AlternateDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[241]"></a>RegionAU915ApplyCFList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915ApplyCFList))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24a]"></a>RegionAU915ApplyDrOffset</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, regionau915.o(i.RegionAU915ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionAU915ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[225]"></a>RegionAU915CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionau915.o(i.RegionAU915CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAU915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[226]"></a>RegionAU915ChanMaskSet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionAU915ChanMaskSet &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[227]"></a>RegionAU915ComputeRxWindowParameters</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, regionau915.o(i.RegionAU915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionAU915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[278]"></a>RegionAU915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[224]"></a>RegionAU915GetPhyParam</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAU915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AdrNext
</UL>

<P><STRONG><a name="[22a]"></a>RegionAU915InitDefaults</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, regionau915.o(i.RegionAU915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[22b]"></a>RegionAU915LinkAdrReq</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, regionau915.o(i.RegionAU915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionAU915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2c5]"></a>RegionAU915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[22c]"></a>RegionAU915NextChannel</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, regionau915.o(i.RegionAU915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionAU915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2cb]"></a>RegionAU915RxConfig</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, regionau915.o(i.RegionAU915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAU915RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[22d]"></a>RegionAU915RxParamSetupReq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[22e]"></a>RegionAU915SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[22f]"></a>RegionAU915SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regionau915.o(i.RegionAU915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionAU915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[231]"></a>RegionAU915TxConfig</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, regionau915.o(i.RegionAU915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionAU915TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2d9]"></a>RegionAU915TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionau915.o(i.RegionAU915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[232]"></a>RegionAU915Verify</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regionau915.o(i.RegionAU915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAU915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1eb]"></a>RegionAdrNext</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, region.o(i.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionAdrNext &rArr; RegionAS923AdrNext &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AdrNext
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920AdrNext
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865AdrNext
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AdrNext
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433AdrNext
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AdrNext
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AdrNext
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[1e4]"></a>RegionAlternateDr</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAlternateDr &rArr; RegionKR920AlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AlternateDr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920AlternateDr
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865AlternateDr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433AlternateDr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AlternateDr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915AlternateDr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[1f4]"></a>RegionApplyCFList</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionApplyCFList &rArr; RegionKR920ApplyCFList &rArr; RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyCFList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyCFList
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[248]"></a>RegionApplyDrOffset</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionApplyDrOffset &rArr; RegionAU915ApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyDrOffset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyDrOffset
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyDrOffset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyDrOffset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyDrOffset
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ApplyDrOffset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[233]"></a>RegionCN470AdrNext</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, regioncn470.o(i.RegionCN470AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCN470AdrNext &rArr; RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23b]"></a>RegionCN470AlternateDr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[242]"></a>RegionCN470ApplyCFList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470ApplyCFList))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24b]"></a>RegionCN470ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[252]"></a>RegionCN470CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regioncn470.o(i.RegionCN470CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCN470CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[253]"></a>RegionCN470ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[254]"></a>RegionCN470ComputeRxWindowParameters</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, regioncn470.o(i.RegionCN470ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[279]"></a>RegionCN470DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[251]"></a>RegionCN470GetPhyParam</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AdrNext
</UL>

<P><STRONG><a name="[257]"></a>RegionCN470InitDefaults</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[258]"></a>RegionCN470LinkAdrReq</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, regioncn470.o(i.RegionCN470LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2c6]"></a>RegionCN470NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[259]"></a>RegionCN470NextChannel</STRONG> (Thumb, 198 bytes, Stack size 136 bytes, regioncn470.o(i.RegionCN470NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2cc]"></a>RegionCN470RxConfig</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, regioncn470.o(i.RegionCN470RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCN470RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[25a]"></a>RegionCN470RxParamSetupReq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[25b]"></a>RegionCN470SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[25c]"></a>RegionCN470SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regioncn470.o(i.RegionCN470SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionCN470SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[25e]"></a>RegionCN470TxConfig</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, regioncn470.o(i.RegionCN470TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2da]"></a>RegionCN470TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[25f]"></a>RegionCN470Verify</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[13c]"></a>RegionCalcBackOff</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCalcBackOff &rArr; RegionUS915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915CalcBackOff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920CalcBackOff
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865CalcBackOff
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433CalcBackOff
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[1e1]"></a>RegionChanMaskSet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RegionChanMaskSet &rArr; RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChanMaskSet
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChanMaskSet
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[207]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915CalcBackOff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920CalcBackOff
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865CalcBackOff
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868CalcBackOff
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433CalcBackOff
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470CalcBackOff
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915CalcBackOff
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
</UL>

<P><STRONG><a name="[20b]"></a>RegionCommonChanDisable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelsRemove
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
</UL>

<P><STRONG><a name="[209]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChanMaskSet
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865InitDefaults
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChanMaskSet
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433InitDefaults
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChanMaskSet
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>

<P><STRONG><a name="[26b]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[210]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[20e]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[20f]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[220]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetContinuousWave
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[1c7]"></a>RegionCommonCountChannels</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ChanMaskSet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>

<P><STRONG><a name="[26a]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[217]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[216]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[21d]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetBandTxDone
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetBandTxDone
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>

<P><STRONG><a name="[21a]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[13e]"></a>RegionCommonValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865Verify
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxParamSetupReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433Verify
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxParamSetupReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>

<P><STRONG><a name="[1de]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1ff]"></a>RegionDlChannelReq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionDlChannelReq &rArr; RegionKR920DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915DlChannelReq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865DlChannelReq
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433DlChannelReq
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470DlChannelReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915DlChannelReq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[234]"></a>RegionEU433AdrNext</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, regioneu433.o(i.RegionEU433AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU433AdrNext &rArr; RegionEU433GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23c]"></a>RegionEU433AlternateDr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regioneu433.o(i.RegionEU433AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU433AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[243]"></a>RegionEU433ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regioneu433.o(i.RegionEU433ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU433ApplyCFList &rArr; RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24c]"></a>RegionEU433ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioneu433.o(i.RegionEU433ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU433ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[260]"></a>RegionEU433CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regioneu433.o(i.RegionEU433CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionEU433CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[265]"></a>RegionEU433ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioneu433.o(i.RegionEU433ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU433ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[280]"></a>RegionEU433ChannelAdd</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU433ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
</UL>

<P><STRONG><a name="[281]"></a>RegionEU433ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ApplyCFList
</UL>

<P><STRONG><a name="[273]"></a>RegionEU433ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, regioneu433.o(i.RegionEU433ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionEU433ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[27a]"></a>RegionEU433DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU433DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[27f]"></a>RegionEU433GetPhyParam</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU433GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433AdrNext
</UL>

<P><STRONG><a name="[285]"></a>RegionEU433InitDefaults</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, regioneu433.o(i.RegionEU433InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionEU433InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[286]"></a>RegionEU433LinkAdrReq</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, regioneu433.o(i.RegionEU433LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionEU433LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[287]"></a>RegionEU433NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU433NewChannelReq &rArr; RegionEU433ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelsRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[288]"></a>RegionEU433NextChannel</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, regioneu433.o(i.RegionEU433NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionEU433NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2cd]"></a>RegionEU433RxConfig</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, regioneu433.o(i.RegionEU433RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionEU433RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[289]"></a>RegionEU433RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU433RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[28a]"></a>RegionEU433SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU433SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[28b]"></a>RegionEU433SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regioneu433.o(i.RegionEU433SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionEU433SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[28d]"></a>RegionEU433TxConfig</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, regioneu433.o(i.RegionEU433TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionEU433TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2db]"></a>RegionEU433TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioneu433.o(i.RegionEU433TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[28e]"></a>RegionEU433Verify</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, regioneu433.o(i.RegionEU433Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU433Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[235]"></a>RegionEU868AdrNext</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, regioneu868.o(i.RegionEU868AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868AdrNext &rArr; RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23d]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[244]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regioneu868.o(i.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24d]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[261]"></a>RegionEU868CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regioneu868.o(i.RegionEU868CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionEU868CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[266]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioneu868.o(i.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[290]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[291]"></a>RegionEU868ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[274]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, regioneu868.o(i.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[27b]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[28f]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU868GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AdrNext
</UL>

<P><STRONG><a name="[295]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, regioneu868.o(i.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[296]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, regioneu868.o(i.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[297]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[298]"></a>RegionEU868NextChannel</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, regioneu868.o(i.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2ce]"></a>RegionEU868RxConfig</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, regioneu868.o(i.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[299]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[29a]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[29b]"></a>RegionEU868SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regioneu868.o(i.RegionEU868SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[29d]"></a>RegionEU868TxConfig</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, regioneu868.o(i.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionEU868TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2dc]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioneu868.o(i.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[29e]"></a>RegionEU868Verify</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, regioneu868.o(i.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1d0]"></a>RegionGetPhyParam</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[237]"></a>RegionIN865AdrNext</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, regionin865.o(i.RegionIN865AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionIN865AdrNext &rArr; RegionIN865GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23f]"></a>RegionIN865AlternateDr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regionin865.o(i.RegionIN865AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionIN865AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[246]"></a>RegionIN865ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regionin865.o(i.RegionIN865ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionIN865ApplyCFList &rArr; RegionIN865ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelsRemove
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24f]"></a>RegionIN865ApplyDrOffset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, regionin865.o(i.RegionIN865ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[263]"></a>RegionIN865CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionin865.o(i.RegionIN865CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionIN865CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[268]"></a>RegionIN865ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regionin865.o(i.RegionIN865ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2a2]"></a>RegionIN865ChannelAdd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, regionin865.o(i.RegionIN865ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionIN865ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
</UL>

<P><STRONG><a name="[2a3]"></a>RegionIN865ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionin865.o(i.RegionIN865ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionIN865ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
</UL>

<P><STRONG><a name="[276]"></a>RegionIN865ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, regionin865.o(i.RegionIN865ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionIN865ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[27d]"></a>RegionIN865DlChannelReq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, regionin865.o(i.RegionIN865DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionIN865DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2a0]"></a>RegionIN865GetPhyParam</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, regionin865.o(i.RegionIN865GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionIN865GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865AdrNext
</UL>

<P><STRONG><a name="[2a7]"></a>RegionIN865InitDefaults</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, regionin865.o(i.RegionIN865InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionIN865InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2a8]"></a>RegionIN865LinkAdrReq</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, regionin865.o(i.RegionIN865LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionIN865LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2a9]"></a>RegionIN865NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regionin865.o(i.RegionIN865NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionIN865NewChannelReq &rArr; RegionIN865ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelsRemove
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2aa]"></a>RegionIN865NextChannel</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, regionin865.o(i.RegionIN865NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionIN865NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2d0]"></a>RegionIN865RxConfig</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, regionin865.o(i.RegionIN865RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionIN865RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2ab]"></a>RegionIN865RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionin865.o(i.RegionIN865RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2ac]"></a>RegionIN865SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionin865.o(i.RegionIN865SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2ad]"></a>RegionIN865SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regionin865.o(i.RegionIN865SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionIN865SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2af]"></a>RegionIN865TxConfig</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, regionin865.o(i.RegionIN865TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionIN865TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2de]"></a>RegionIN865TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionin865.o(i.RegionIN865TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2b0]"></a>RegionIN865Verify</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, regionin865.o(i.RegionIN865Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1d1]"></a>RegionInitDefaults</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionInitDefaults &rArr; RegionKR920InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920InitDefaults
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865InitDefaults
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433InitDefaults
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915InitDefaults
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1ce]"></a>RegionIsActive</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[236]"></a>RegionKR920AdrNext</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, regionkr920.o(i.RegionKR920AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionKR920AdrNext &rArr; RegionKR920GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[23e]"></a>RegionKR920AlternateDr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, regionkr920.o(i.RegionKR920AlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionKR920AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[245]"></a>RegionKR920ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regionkr920.o(i.RegionKR920ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionKR920ApplyCFList &rArr; RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[24e]"></a>RegionKR920ApplyDrOffset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, regionkr920.o(i.RegionKR920ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionKR920ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[262]"></a>RegionKR920CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionkr920.o(i.RegionKR920CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionKR920CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[267]"></a>RegionKR920ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regionkr920.o(i.RegionKR920ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionKR920ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2b3]"></a>RegionKR920ChannelAdd</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920ChannelAdd &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
</UL>

<P><STRONG><a name="[2b4]"></a>RegionKR920ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ApplyCFList
</UL>

<P><STRONG><a name="[275]"></a>RegionKR920ComputeRxWindowParameters</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, regionkr920.o(i.RegionKR920ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionKR920ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[27c]"></a>RegionKR920DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionKR920DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[29f]"></a>RegionKR920GetPhyParam</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionKR920GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920AdrNext
</UL>

<P><STRONG><a name="[2b1]"></a>RegionKR920InitDefaults</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, regionkr920.o(i.RegionKR920InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionKR920InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2b8]"></a>RegionKR920LinkAdrReq</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, regionkr920.o(i.RegionKR920LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionKR920LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2b9]"></a>RegionKR920NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regionkr920.o(i.RegionKR920NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionKR920NewChannelReq &rArr; RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelsRemove
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2ba]"></a>RegionKR920NextChannel</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, regionkr920.o(i.RegionKR920NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionKR920NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2cf]"></a>RegionKR920RxConfig</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, regionkr920.o(i.RegionKR920RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionKR920RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2bb]"></a>RegionKR920RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionKR920RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2bc]"></a>RegionKR920SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionKR920SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2bd]"></a>RegionKR920SetContinuousWave</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, regionkr920.o(i.RegionKR920SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RegionKR920SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxEIRP
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2c2]"></a>RegionKR920TxConfig</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, regionkr920.o(i.RegionKR920TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionKR920TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxEIRP
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2dd]"></a>RegionKR920TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionkr920.o(i.RegionKR920TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2c3]"></a>RegionKR920Verify</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, regionkr920.o(i.RegionKR920Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionKR920Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1fa]"></a>RegionLinkAdrReq</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920LinkAdrReq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433LinkAdrReq
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915LinkAdrReq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1fc]"></a>RegionNewChannelReq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionNewChannelReq &rArr; RegionKR920NewChannelReq &rArr; RegionKR920ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NewChannelReq
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NewChannelReq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NewChannelReq
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NewChannelReq
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NewChannelReq
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2c8]"></a>RegionNextChannel</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1df]"></a>RegionRxConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionRxConfig &rArr; RegionUS915RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxConfig
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxConfig
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxConfig
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[1fb]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionUS915RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920RxParamSetupReq
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxParamSetupReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433RxParamSetupReq
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915RxParamSetupReq
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1f6]"></a>RegionSetBandTxDone</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionSetBandTxDone &rArr; RegionUS915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetBandTxDone
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetBandTxDone
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetBandTxDone
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetBandTxDone
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[2d4]"></a>RegionSetContinuousWave</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RegionSetContinuousWave &rArr; RegionKR920SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetContinuousWave
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[2d6]"></a>RegionTxConfig</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionTxConfig &rArr; RegionKR920TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1fd]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxParamSetupReq
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxParamSetupReq
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxParamSetupReq
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxParamSetupReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxParamSetupReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxParamSetupReq
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[238]"></a>RegionUS915AdrNext</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, regionus915.o(i.RegionUS915AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionUS915AdrNext &rArr; RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[240]"></a>RegionUS915AlternateDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[247]"></a>RegionUS915ApplyCFList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915ApplyCFList))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[250]"></a>RegionUS915ApplyDrOffset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, regionus915.o(i.RegionUS915ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionUS915ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[264]"></a>RegionUS915CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionus915.o(i.RegionUS915CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionUS915CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[269]"></a>RegionUS915ChanMaskSet</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[277]"></a>RegionUS915ComputeRxWindowParameters</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, regionus915.o(i.RegionUS915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[27e]"></a>RegionUS915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2a1]"></a>RegionUS915GetPhyParam</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AdrNext
</UL>

<P><STRONG><a name="[2b2]"></a>RegionUS915InitDefaults</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, regionus915.o(i.RegionUS915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2c4]"></a>RegionUS915LinkAdrReq</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, regionus915.o(i.RegionUS915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2c7]"></a>RegionUS915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2c9]"></a>RegionUS915NextChannel</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, regionus915.o(i.RegionUS915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionUS915NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2d1]"></a>RegionUS915RxConfig</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, regionus915.o(i.RegionUS915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionUS915RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2d2]"></a>RegionUS915RxParamSetupReq</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2d3]"></a>RegionUS915SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2d5]"></a>RegionUS915SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regionus915.o(i.RegionUS915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2d7]"></a>RegionUS915TxConfig</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, regionus915.o(i.RegionUS915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionUS915TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[2df]"></a>RegionUS915TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regionus915.o(i.RegionUS915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2e2]"></a>RegionUS915Verify</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, regionus915.o(i.RegionUS915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[1da]"></a>RegionVerify</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920Verify
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865Verify
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433Verify
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915Verify
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_join_cnt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[2e3]"></a>RtcComputeElapsedTime</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtc-board.o(i.RtcComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[2e7]"></a>RtcComputeWakeUpTime</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, rtc-board.o(i.RtcComputeWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RtcComputeWakeUpTime &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
</UL>

<P><STRONG><a name="[313]"></a>RtcGetAdjustedTimeoutValue</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetAdjustedTimeoutValue))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[2ea]"></a>RtcGetElapsedAlarmTime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtc-board.o(i.RtcGetElapsedAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RtcGetElapsedAlarmTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>

<P><STRONG><a name="[2eb]"></a>RtcGetTimerValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc-board.o(i.RtcGetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RtcGetTimerValue &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[133]"></a>RtcInit</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, rtc-board.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RtcInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[128]"></a>RtcRecoverMcuStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc-board.o(i.RtcRecoverMcuStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockLowPowerDuringTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>RtcSetTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc-board.o(i.RtcSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[356]"></a>RxRadioP2PFrame</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, loramac.o(i.RxRadioP2PFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RxRadioP2PFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PRxContinue
</UL>

<P><STRONG><a name="[2ef]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx127x-board.o(i.SX1276AntSwDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276AntSwDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[2f0]"></a>SX1276AntSwInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx127x-board.o(i.SX1276AntSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[9c]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx127x-board.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2fb]"></a>SX1276GetPaSelect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sx127x-board.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[95]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx127x.o(i.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 628 bytes, Stack size 120 bytes, sx127x.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>SX1276Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sx127x.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>SX1276IoDeInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sx127x-board.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276IoDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[136]"></a>SX1276IoInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sx127x-board.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276IoInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[2f3]"></a>SX1276IoIrqInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sx127x-board.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276IoIrqInit &rArr; GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[98]"></a>SX1276IsChannelFree</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sx127x.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 890 bytes, Stack size 24 bytes, sx127x.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276OnDio0Irq &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, sx127x.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276OnDio1Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, sx127x.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sx127x.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sx127x.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, sx127x.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[99]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx127x.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx127x.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx127x.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[a4]"></a>SX1276ReadRssi</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx127x.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>SX1276Reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx127x.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SX1276Reset &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[9e]"></a>SX1276Send</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, sx127x.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f8]"></a>SX1276SetAntSw</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sx127x-board.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276SetAntSw &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[2f9]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx127x-board.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[97]"></a>SX1276SetChannel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx127x.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx127x.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>SX1276SetModem</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx127x.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>SX1276SetOpMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx127x.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[aa]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx127x.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2fa]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, sx127x-board.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[a1]"></a>SX1276SetRx</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, sx127x.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276SetRx &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>SX1276SetRxConfig</STRONG> (Thumb, 784 bytes, Stack size 104 bytes, sx127x.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>SX1276SetSleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx127x.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>SX1276SetStby</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx127x.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276SetStby &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>SX1276SetTx</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sx127x.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276SetTx &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[9b]"></a>SX1276SetTxConfig</STRONG> (Thumb, 608 bytes, Stack size 56 bytes, sx127x.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, sx127x.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>SX1276StartCad</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx127x.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx127x.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>SX1276WriteBuffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx127x.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x-board.o(.constdata)
</UL>
<P><STRONG><a name="[2f5]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[344]"></a>SX127X_INIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, loramac.o(i.SX127X_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX127X_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
</UL>

<P><STRONG><a name="[1db]"></a>Send</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[2fd]"></a>SendFrameOnChannel</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SendFrameOnChannel &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[2fe]"></a>SendRadioP2PFrame</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, loramac.o(i.SendRadioP2PFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendRadioP2PFrame &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PTxContinue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_P2PTxContinueTimerEvent
</UL>

<P><STRONG><a name="[1e6]"></a>SetTxContinuousWave</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetTxContinuousWave &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1e7]"></a>SetTxContinuousWave1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetTxContinuousWave1 &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[12a]"></a>SpiDeInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, spi-board.o(i.SpiDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[300]"></a>SpiFormat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi-board.o(i.SpiFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[301]"></a>SpiFrequency</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spi-board.o(i.SpiFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[2ff]"></a>SpiGetFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi-board.o(i.SpiGetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[2f6]"></a>SpiInOut</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[135]"></a>SpiInit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, spi-board.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SpiInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFrequency
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFormat
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[302]"></a>SysEnterUltraPowerStopMode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board.o(i.SysEnterUltraPowerStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysEnterUltraPowerStopMode &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UninstallWakeUpPin
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InstallWakeUpPin
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
</UL>

<P><STRONG><a name="[4a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[308]"></a>SystemClockReConfig</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, board.o(i.SystemClockReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClockReConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[77]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>TIM6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer-board.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>TimerGetCurrentTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[13b]"></a>TimerGetElapsedTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[30c]"></a>TimerGetValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1d2]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_InitLoRaWAN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[30f]"></a>TimerIrqHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
</UL>

<P><STRONG><a name="[310]"></a>TimerLowPowerHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, timer.o(i.TimerLowPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TimerLowPowerHandler &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockLowPowerDuringTask
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Callback
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>TimerSetValue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_join_callback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rw_P2PTxLoop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
</UL>

<P><STRONG><a name="[1f2]"></a>TimerStart</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_join_callback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rw_P2PTxLoop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[1f0]"></a>TimerStop</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, timer.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PTxStop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_join_callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_P2PTxContinueTimerEvent
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[6f]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart-board.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USART3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart-board.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>UartFlush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart-board.o(i.UartFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
</UL>

<P><STRONG><a name="[16a]"></a>UartMcuConfig</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, uart-board.o(i.UartMcuConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UartMcuConfig &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuOnPpsSignal
</UL>

<P><STRONG><a name="[167]"></a>UartMcuGetChar</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart-board.o(i.UartMcuGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartMcuGetChar &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_getchar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>

<P><STRONG><a name="[169]"></a>UartMcuInit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, uart-board.o(i.UartMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuOnPpsSignal
</UL>

<P><STRONG><a name="[309]"></a>UninstallWakeUpPin</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, board.o(i.UninstallWakeUpPin))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
</UL>

<P><STRONG><a name="[ff]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[ee]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[115]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[119]"></a>aes_set_key</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[26c]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[337]"></a>check_hex_invaild</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, at_cmd.o(i.check_hex_invaild))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_hex_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
</UL>

<P><STRONG><a name="[352]"></a>crc_calc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utilities.o(i.crc_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
</UL>

<P><STRONG><a name="[329]"></a>e_getchar</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart-board.o(i.e_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = e_getchar &rArr; UartMcuGetChar &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_cli_loop
</UL>

<P><STRONG><a name="[1ba]"></a>e_printf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uart-board.o(i.e_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_lorawan_class
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_ex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_hex_buf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_write_config
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_version
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_uart_config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_status
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_signal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rxc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rx_stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rf_config
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reload
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_set
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_read_config
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_adc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_cnt
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_check
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_abp_info
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[32a]"></a>e_printf_raw</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart-board.o(i.e_printf_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = e_printf_raw &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_ex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_read_config
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
</UL>

<P><STRONG><a name="[271]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[32b]"></a>get_active_partition</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, partition.o(i.get_active_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_active_partition &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
</UL>

<P><STRONG><a name="[32d]"></a>get_gps_data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app.o(i.get_gps_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_gps_data &rArr; e_printf_raw &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32e]"></a>get_passive_partition</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, partition.o(i.get_passive_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_passive_partition &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
</UL>

<P><STRONG><a name="[335]"></a>lora_cli_loop</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, at_cmd.o(i.lora_cli_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = lora_cli_loop &rArr; do_work &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_getchar
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>lora_recv</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, at_cmd.o(i.lora_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lora_recv &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rw_P2PTxLoop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[1ef]"></a>lora_recv_ex</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, at_cmd.o(i.lora_recv_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lora_recv_ex &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_P2PRxDone
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[db]"></a>main</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = main &rArr; rw_LoRaTxData &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ReadUsrConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaTxData
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkOTAA
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_InitLoRaWAN
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_cli_loop
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIRQ_Enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[116]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioP2PFrame
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1f8]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilities.o(i.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[114]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
</UL>

<P><STRONG><a name="[34f]"></a>rand1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utilities.o(i.rand1))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[213]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[33d]"></a>read_config</STRONG> (Thumb, 64 bytes, Stack size 1376 bytes, lora_config.o(i.read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = read_config &rArr; read_partition &rArr; get_active_partition &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_config_string
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_read_config
</UL>

<P><STRONG><a name="[336]"></a>read_partition</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, partition.o(i.read_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_partition &rArr; get_active_partition &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_partition
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_config
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_uart_config
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rf_config
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ReadUsrConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e6]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
</UL>

<P><STRONG><a name="[355]"></a>rw_DeInitLoRaWAN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lora.o(i.rw_DeInitLoRaWAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rw_DeInitLoRaWAN &rArr; LoRaClrRadioStatus &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaClrRadioStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacDeInitialization
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
</UL>

<P><STRONG><a name="[346]"></a>rw_GetTxDataRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rw_lora.o(i.rw_GetTxDataRate))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
</UL>

<P><STRONG><a name="[34a]"></a>rw_GetVersion</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, rw_lora.o(i.rw_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rw_GetVersion &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_version
</UL>

<P><STRONG><a name="[34d]"></a>rw_InitLoRaWAN</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rw_lora.o(i.rw_InitLoRaWAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = rw_InitLoRaWAN &rArr; LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaClrRadioStatus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[339]"></a>rw_JoinNetworkABP</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rw_lora.o(i.rw_JoinNetworkABP))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rw_JoinNetworkABP &rArr; rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
</UL>

<P><STRONG><a name="[338]"></a>rw_JoinNetworkOTAA</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, rw_lora.o(i.rw_JoinNetworkOTAA))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rw_JoinNetworkOTAA &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33a]"></a>rw_LoRaLinkCheck</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, rw_lora.o(i.rw_LoRaLinkCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rw_LoRaLinkCheck &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_check
</UL>

<P><STRONG><a name="[341]"></a>rw_LoRaP2PRxContinue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rw_lora.o(i.rw_LoRaP2PRxContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rw_LoRaP2PRxContinue &rArr; RxRadioP2PFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxRadioP2PFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rxc
</UL>

<P><STRONG><a name="[340]"></a>rw_LoRaP2PRxStop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_lora.o(i.rw_LoRaP2PRxStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_LoRaP2PRxStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rx_stop
</UL>

<P><STRONG><a name="[349]"></a>rw_LoRaP2PTxContinue</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rw_lora.o(i.rw_LoRaP2PTxContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rw_LoRaP2PTxContinue &rArr; SendRadioP2PFrame &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioP2PFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
</UL>

<P><STRONG><a name="[348]"></a>rw_LoRaP2PTxStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rw_lora.o(i.rw_LoRaP2PTxStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rw_LoRaP2PTxStop &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_stop
</UL>

<P><STRONG><a name="[342]"></a>rw_LoRaTxData</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, rw_lora.o(i.rw_LoRaTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rw_LoRaTxData &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>rw_LoadUsrConfig</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, rw_lora.o(i.rw_LoadUsrConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_SetTxDataRate
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSetUserMode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaGetUserMode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkABP
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[93]"></a>rw_P2PTxContinueTimerEvent</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rw_lora.o(i.rw_P2PTxContinueTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rw_P2PTxContinueTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioP2PFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[34c]"></a>rw_ReadUsrConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rw_lora.o(i.rw_ReadUsrConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rw_ReadUsrConfig &rArr; rw_restore_LoRaWAN_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Str2Region
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>rw_Region2Str</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rw_lora.o(i.rw_Region2Str))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[33e]"></a>rw_ResetLoRaWAN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rw_lora.o(i.rw_ResetLoRaWAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = rw_ResetLoRaWAN &rArr; rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ReadUsrConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_InitLoRaWAN
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_DeInitLoRaWAN
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reload
</UL>

<P><STRONG><a name="[33f]"></a>rw_ResetMCU</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lora.o(i.rw_ResetMCU))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_boot
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
</UL>

<P><STRONG><a name="[347]"></a>rw_SetTxDataRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rw_lora.o(i.rw_SetTxDataRate))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
</UL>

<P><STRONG><a name="[330]"></a>rw_Str2Region</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, rw_lora.o(i.rw_Str2Region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_Str2Region
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_join_cnt
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ReadUsrConfig
</UL>

<P><STRONG><a name="[333]"></a>rw_restore_LoRaWAN_config</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, rw_lora.o(i.rw_restore_LoRaWAN_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rw_restore_LoRaWAN_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetUniqueId
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Region2Str
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reload
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ReadUsrConfig
</UL>

<P><STRONG><a name="[359]"></a>set_active_partition</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, partition.o(i.set_active_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
</UL>

<P><STRONG><a name="[1d5]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[89]"></a>timer_join_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app.o(i.timer_join_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = timer_join_callback &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[34b]"></a>write_config</STRONG> (Thumb, 70 bytes, Stack size 1376 bytes, lora_config.o(i.write_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = write_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_string
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_write_config
</UL>

<P><STRONG><a name="[35a]"></a>write_data</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, partition.o(i.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ENABLE_FLASH
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DISABLE_FLASH
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_partition
</UL>

<P><STRONG><a name="[331]"></a>write_partition</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, partition.o(i.write_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calc
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_partition
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_passive_partition
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_lorawan_class
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_uart_config
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rf_config
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[35d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[365]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
</UL>

<P><STRONG><a name="[361]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
</UL>

<P><STRONG><a name="[362]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[363]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
</UL>

<P><STRONG><a name="[3ae]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_channel_mask
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[3af]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[354]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[364]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[368]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[366]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[360]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[35f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[367]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[353]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[324]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[369]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[36b]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[36c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[36e]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[372]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[2c0]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[3b1]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[3b2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[2c1]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[371]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[3b3]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[36d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[370]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[26e]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[373]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[375]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[b4]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[b8]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[334]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, at_cmd.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
</UL>

<P><STRONG><a name="[325]"></a>do_work</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, at_cmd.o(i.do_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = do_work &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_args
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_cli_loop
</UL>

<P><STRONG><a name="[26]"></a>lora_abp_info</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, at_cmd.o(i.lora_abp_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lora_abp_info &rArr; out_hex_buf &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_hex_buf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>lora_band</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at_cmd.o(i.lora_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lora_band &rArr; rw_restore_LoRaWAN_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Str2Region
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>lora_gpio</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, at_cmd.o(i.lora_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = lora_gpio &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>lora_join</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, at_cmd.o(i.lora_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = lora_join &rArr; rw_JoinNetworkOTAA &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkABP
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_hex_invaild
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_JoinNetworkOTAA
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>lora_link_check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, at_cmd.o(i.lora_link_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = lora_link_check &rArr; rw_LoRaLinkCheck &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaLinkCheck
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>lora_link_cnt</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, at_cmd.o(i.lora_link_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = lora_link_cnt &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>lora_mode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, at_cmd.o(i.lora_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lora_mode &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSetUserMode
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaGetUserMode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>lora_rd_adc</STRONG> (Thumb, 110 bytes, Stack size 120 bytes, at_cmd.o(i.lora_rd_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lora_rd_adc &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcReadChannel
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>lora_rd_iic</STRONG> (Thumb, 208 bytes, Stack size 184 bytes, at_cmd.o(i.lora_rd_iic))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lora_rd_iic &rArr; out_hex_buf &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cResetBus
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBuffer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_hex_buf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>lora_rd_reg</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, at_cmd.o(i.lora_rd_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lora_rd_reg &rArr; out_hex_buf &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_hex_buf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>lora_read_config</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, at_cmd.o(i.lora_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = lora_read_config &rArr; read_config &rArr; read_partition &rArr; get_active_partition &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_config
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf_raw
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>lora_recv_set</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_cmd.o(i.lora_recv_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lora_recv_set &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>lora_reload</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_cmd.o(i.lora_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = lora_reload &rArr; rw_ResetLoRaWAN &rArr; rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_restore_LoRaWAN_config
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>lora_reset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at_cmd.o(i.lora_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = lora_reset &rArr; rw_ResetLoRaWAN &rArr; rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetMCU
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetLoRaWAN
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>lora_rf_config</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, at_cmd.o(i.lora_rf_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lora_rf_config &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>lora_rx_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_cmd.o(i.lora_rx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lora_rx_stop &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PRxStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>lora_rxc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, at_cmd.o(i.lora_rxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lora_rxc &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PRxContinue
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>lora_send</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, at_cmd.o(i.lora_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = lora_send &rArr; rw_LoRaTxData &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaTxData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>lora_signal</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, at_cmd.o(i.lora_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lora_signal &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaGetRssiSnr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>lora_sleep</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, at_cmd.o(i.lora_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = lora_sleep &rArr; rw_LoadUsrConfig &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFlush
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEnterUltraPowerStopMode
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_INIT
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoadUsrConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIRQ_Enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>lora_status</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, at_cmd.o(i.lora_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = lora_status &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaGetRadioStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaClrRadioStatus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>lora_tx_dr</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, at_cmd.o(i.lora_tx_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = lora_tx_dr &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_SetTxDataRate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_GetTxDataRate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>lora_tx_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_cmd.o(i.lora_tx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = lora_tx_stop &rArr; rw_LoRaP2PTxStop &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PTxStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>lora_txc</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, at_cmd.o(i.lora_txc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lora_txc &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_LoRaP2PTxContinue
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>lora_uart_config</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, at_cmd.o(i.lora_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = lora_uart_config &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>lora_version</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at_cmd.o(i.lora_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = lora_version &rArr; rw_GetVersion &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_GetVersion
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>lora_wr_iic</STRONG> (Thumb, 300 bytes, Stack size 128 bytes, at_cmd.o(i.lora_wr_iic))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lora_wr_iic &rArr; I2cWriteBuffer &rArr; I2cMcuWriteBuffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteBuffer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cResetBus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>lora_wr_reg</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, at_cmd.o(i.lora_wr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lora_wr_reg &rArr; out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>lora_write_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at_cmd.o(i.lora_write_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = lora_write_config &rArr; write_config &rArr; write_partition &rArr; set_active_partition &rArr; write_data &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[326]"></a>out_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at_cmd.o(i.out_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = out_error &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_write_config
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_reg
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_wr_iic
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_uart_config
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_txc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_stop
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_tx_dr
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_status
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_sleep
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rxc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rx_stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rf_config
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_set
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_read_config
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_adc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_mode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_cnt
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_link_check
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_join
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_gpio
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_band
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_abp_info
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
</UL>

<P><STRONG><a name="[332]"></a>out_hex_buf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, at_cmd.o(i.out_hex_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = out_hex_buf &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_reg
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_rd_iic
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_abp_info
</UL>

<P><STRONG><a name="[327]"></a>parse_args</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, at_cmd.o(i.parse_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parse_args
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work
</UL>

<P><STRONG><a name="[c]"></a>start_boot</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_cmd.o(i.start_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = start_boot &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetMCU
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_cmd.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>handle_ack_retrans</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lora_config.o(i.handle_ack_retrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_ack_retrans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>handle_adr</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lora_config.o(i.handle_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_adr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>handle_app_eui</STRONG> (Thumb, 270 bytes, Stack size 80 bytes, lora_config.o(i.handle_app_eui))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_app_eui &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>handle_app_key</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, lora_config.o(i.handle_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_app_key &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>handle_apps_key</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, lora_config.o(i.handle_apps_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_apps_key &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>handle_channel_list</STRONG> (Thumb, 542 bytes, Stack size 72 bytes, lora_config.o(i.handle_channel_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_channel_list &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>handle_channel_mask</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lora_config.o(i.handle_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = handle_channel_mask &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>handle_def_tx_dr</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, lora_config.o(i.handle_def_tx_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = handle_def_tx_dr &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>handle_dev_addr</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, lora_config.o(i.handle_dev_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_dev_addr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>handle_dev_eui</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, lora_config.o(i.handle_dev_eui))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_dev_eui &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>handle_duty_cycle</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lora_config.o(i.handle_duty_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_duty_cycle &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>handle_join_cnt</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lora_config.o(i.handle_join_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_join_cnt &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_Str2Region
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>handle_lorawan_class</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, lora_config.o(i.handle_lorawan_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = handle_lorawan_class &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_partition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e_printf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>handle_max_channels</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lora_config.o(i.handle_max_channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_max_channels &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>handle_nb_trans</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lora_config.o(i.handle_nb_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_nb_trans &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>handle_nwks_key</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, lora_config.o(i.handle_nwks_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = handle_nwks_key &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>handle_public_network</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lora_config.o(i.handle_public_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = handle_public_network &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>handle_rx2</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lora_config.o(i.handle_rx2))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = handle_rx2 &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>handle_rx_delay1</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lora_config.o(i.handle_rx_delay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_rx_delay1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>handle_tx_power</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lora_config.o(i.handle_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = handle_tx_power &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>handle_txpwr_level</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lora_config.o(i.handle_txpwr_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = handle_txpwr_level &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_config.o(.data)
</UL>
<P><STRONG><a name="[35c]"></a>parse_args</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, lora_config.o(i.parse_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_args
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_string
</UL>

<P><STRONG><a name="[350]"></a>read_config_string</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lora_config.o(i.read_config_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_config_string
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_config
</UL>

<P><STRONG><a name="[35b]"></a>write_config_string</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, lora_config.o(i.write_config_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = write_config_string &rArr; parse_args
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_args
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config
</UL>

<P><STRONG><a name="[319]"></a>_DISABLE_FLASH</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, partition.o(i._DISABLE_FLASH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DISABLE_FLASH
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[31b]"></a>_ENABLE_FLASH</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, partition.o(i._ENABLE_FLASH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ENABLE_FLASH
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>

<P><STRONG><a name="[32c]"></a>read_data</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, partition.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partition
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_active_partition
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_passive_partition
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_partition
</UL>

<P><STRONG><a name="[8a]"></a>McpsConfirm</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, rw_lora.o(i.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = McpsConfirm &rArr; lora_recv &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[8b]"></a>McpsIndication</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rw_lora.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = McpsIndication &rArr; lora_recv_ex &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[8c]"></a>MlmeConfirm</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rw_lora.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MlmeConfirm &rArr; lora_recv &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[1bb]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rw_lora.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ResetMCU
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[31d]"></a>_rw_P2PTxLoop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rw_lora.o(i._rw_P2PTxLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _rw_P2PTxLoop &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_P2PTxTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_P2PTxDone
</UL>

<P><STRONG><a name="[90]"></a>rw_P2PRxDone</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, rw_lora.o(i.rw_P2PRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = rw_P2PRxDone &rArr; lora_recv_ex &rArr; e_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_recv_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[92]"></a>rw_P2PRxError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rw_lora.o(i.rw_P2PRxError))
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[91]"></a>rw_P2PRxTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rw_lora.o(i.rw_P2PRxTimeout))
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[8e]"></a>rw_P2PTxDone</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rw_lora.o(i.rw_P2PTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = rw_P2PTxDone &rArr; _rw_P2PTxLoop &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rw_P2PTxLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[8f]"></a>rw_P2PTxTimeout</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rw_lora.o(i.rw_P2PTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = rw_P2PTxTimeout &rArr; _rw_P2PTxLoop &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rw_P2PTxLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lora.o(i.rw_InitLoRaWAN)
</UL>
<P><STRONG><a name="[134]"></a>BoardUnusedIoInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.BoardUnusedIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardUnusedIoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStandbyMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[132]"></a>SystemClockConfig</STRONG> (Thumb, 154 bytes, Stack size 96 bytes, board.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[2e9]"></a>RtcCheckCalendarRollOver</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rtc-board.o(i.RtcCheckCalendarRollOver))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>

<P><STRONG><a name="[2e5]"></a>RtcComputeTimerTimeToAlarmTick</STRONG> (Thumb, 556 bytes, Stack size 112 bytes, rtc-board.o(i.RtcComputeTimerTimeToAlarmTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[2e4]"></a>RtcConvertCalendarTickToTimerTime</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, rtc-board.o(i.RtcConvertCalendarTickToTimerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>

<P><STRONG><a name="[2e8]"></a>RtcGetCalendar</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcGetCalendar &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCheckCalendarRollOver
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>

<P><STRONG><a name="[2ed]"></a>RtcStartWakeUpAlarm</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rtc-board.o(i.RtcStartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_DeactivateWakeUpTimer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
</UL>

<P><STRONG><a name="[183]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[184]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[14a]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32l1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1bd]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[17a]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, stm32l1xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[17d]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32l1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[179]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1bc]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[17b]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[17e]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[18b]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1ae]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>UART_Receive_IT</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>UART_SetConfig</STRONG> (Thumb, 850 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ad]"></a>UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1e5]"></a>AddMacCommand</STRONG> (Thumb, 404 bytes, Stack size 20 bytes, loramac.o(i.AddMacCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddMacCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[13a]"></a>CalculateBackOff</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CalculateBackOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[82]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7e]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 886 bytes, Stack size 16 bytes, loramac.o(i.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[84]"></a>OnRadioRxDone</STRONG> (Thumb, 1756 bytes, Stack size 136 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = OnRadioRxDone &rArr; PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> loramac.o(i.LoRaMacInitialization)
<LI> loramac.o(i.SX127X_INIT)
</UL>
<P><STRONG><a name="[85]"></a>OnRadioRxError</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OnRadioRxError &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 2]<UL><LI> loramac.o(i.LoRaMacInitialization)
<LI> loramac.o(i.SX127X_INIT)
</UL>
<P><STRONG><a name="[87]"></a>OnRadioRxTimeout</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OnRadioRxTimeout &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 2]<UL><LI> loramac.o(i.LoRaMacInitialization)
<LI> loramac.o(i.SX127X_INIT)
</UL>
<P><STRONG><a name="[83]"></a>OnRadioTxDone</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnRadioTxDone &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 2]<UL><LI> loramac.o(i.LoRaMacInitialization)
<LI> loramac.o(i.SX127X_INIT)
</UL>
<P><STRONG><a name="[86]"></a>OnRadioTxTimeout</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OnRadioTxTimeout &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Address Reference Count : 2]<UL><LI> loramac.o(i.LoRaMacInitialization)
<LI> loramac.o(i.SX127X_INIT)
</UL>
<P><STRONG><a name="[80]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnRxWindow1TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[81]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7f]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[1f9]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, loramac.o(i.ParseMacCommandsToRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParseMacCommandsToRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[1f3]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1f5]"></a>ProcessMacCommands</STRONG> (Thumb, 866 bytes, Stack size 64 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1cc]"></a>ResetMacParameters</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacDeInitialization
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[1e0]"></a>RxWindowSetup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[1f1]"></a>ScheduleTx</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertCalendarTickToTimerTime &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1ec]"></a>ValidatePayloadLength</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[13d]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regionas923.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[20d]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionas923.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[212]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionas923.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[21f]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionas923.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[20a]"></a>VerifyTxFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regionas923.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>

<P><STRONG><a name="[13f]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, regionau915.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915NextChannel
</UL>

<P><STRONG><a name="[228]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionau915.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[229]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionau915.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915GetPhyParam
</UL>

<P><STRONG><a name="[230]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionau915.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915TxConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAU915SetContinuousWave
</UL>

<P><STRONG><a name="[140]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, regioncn470.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[255]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regioncn470.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[256]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn470.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[25d]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioncn470.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetContinuousWave
</UL>

<P><STRONG><a name="[272]"></a>CountChannels</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, regioncommon.o(i.CountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>

<P><STRONG><a name="[141]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regioneu433.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433NextChannel
</UL>

<P><STRONG><a name="[283]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regioneu433.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[284]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioneu433.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433GetPhyParam
</UL>

<P><STRONG><a name="[28c]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioneu433.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433TxConfig
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433SetContinuousWave
</UL>

<P><STRONG><a name="[282]"></a>VerifyTxFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regioneu433.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433DlChannelReq
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU433ChannelAdd
</UL>

<P><STRONG><a name="[142]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regioneu868.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[293]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regioneu868.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[294]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioneu868.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[29c]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regioneu868.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
</UL>

<P><STRONG><a name="[292]"></a>VerifyTxFreq</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioneu868.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[143]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regionin865.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
</UL>

<P><STRONG><a name="[2a5]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionin865.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2a6]"></a>GetNextLowerTxDr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, regionin865.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
</UL>

<P><STRONG><a name="[2ae]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionin865.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetContinuousWave
</UL>

<P><STRONG><a name="[2a4]"></a>VerifyTxFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, regionin865.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865DlChannelReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
</UL>

<P><STRONG><a name="[144]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regionkr920.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920NextChannel
</UL>

<P><STRONG><a name="[2b6]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionkr920.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2bf]"></a>GetMaxEIRP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regionkr920.o(i.GetMaxEIRP))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[2b7]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionkr920.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920GetPhyParam
</UL>

<P><STRONG><a name="[2be]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionkr920.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920TxConfig
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920SetContinuousWave
</UL>

<P><STRONG><a name="[2b5]"></a>VerifyTxFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, regionkr920.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920DlChannelReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionKR920ChannelAdd
</UL>

<P><STRONG><a name="[145]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, regionus915.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[2e0]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionus915.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2e1]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionus915.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>

<P><STRONG><a name="[1c6]"></a>LimitTxPower</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, regionus915.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LimitTxPower &rArr; RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
</UL>

<P><STRONG><a name="[2fc]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx127x.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[2ee]"></a>RxChainCalibration</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sx127x.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[14c]"></a>FifoNext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fifo.o(i.FifoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[16d]"></a>GpsNmeaValidateChecksum</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gps.o(i.GpsNmeaValidateChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpsNmeaValidateChecksum &rArr; GpsNmeaChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>

<P><STRONG><a name="[314]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[30d]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[315]"></a>TimerInsertTimer</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, timer.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[30e]"></a>TimerSetTimeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcComputeTimerTimeToAlarmTick &rArr; round &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAdjustedTimeoutValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[31e]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[320]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[34e]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[323]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[321]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[322]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[31f]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[36a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[35e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[374]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[36f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[f8]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
